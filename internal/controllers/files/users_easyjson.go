// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package files

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController(in *jlexer.Lexer, out *UserAddGroupModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.IDs = nil
			} else {
				in.Delim('[')
				if out.IDs == nil {
					if !in.IsDelim(']') {
						out.IDs = make([]int64, 0, 8)
					} else {
						out.IDs = []int64{}
					}
				} else {
					out.IDs = (out.IDs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.IDs = append(out.IDs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController(out *jwriter.Writer, in UserAddGroupModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix)
		if in.IDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.IDs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserAddGroupModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAddGroupModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserAddGroupModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAddGroupModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController(l, v)
}
func easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController1(in *jlexer.Lexer, out *NewUserModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "passwd":
			out.Passwd = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController1(out *jwriter.Writer, in NewUserModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"passwd\":"
		out.RawString(prefix)
		out.String(string(in.Passwd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewUserModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewUserModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewUserModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewUserModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController1(l, v)
}
func easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController2(in *jlexer.Lexer, out *NewGroupModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController2(out *jwriter.Writer, in NewGroupModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewGroupModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewGroupModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewGroupModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewGroupModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController2(l, v)
}
func easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController3(in *jlexer.Lexer, out *ListGroupsModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ListGroupsModel, 0, 2)
			} else {
				*out = ListGroupsModel{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 ListGroupModel
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController3(out *jwriter.Writer, in ListGroupsModel) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ListGroupsModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListGroupsModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListGroupsModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListGroupsModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController3(l, v)
}
func easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController4(in *jlexer.Lexer, out *ListGroupModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController4(out *jwriter.Writer, in ListGroupModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListGroupModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListGroupModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComArwosArtifactoryInternalController4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListGroupModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListGroupModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComArwosArtifactoryInternalController4(l, v)
}
